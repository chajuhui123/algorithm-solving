
# 1263
# 최대한 늦게 일을 시작할 수 있는 시간
# greedy + 정렬

import sys
input = sys.stdin.readline

n = int(input()) # 해야할 일 갯수 n
todos = []

for _ in range(n):
    t, s = map(int, input().split()) # t 작업 시간, s 최대작업 종료 시간
    todos.append((s, t)) # python sort 함수는 튜플의 첫 번째 인자를 기준으로 정렬을 하여, 작업 종료 시간을 첫 번째 인자로 넣어줌

# 1. 작업이 끝나는 시간이 가장 늦는 순서로 정렬 (늦게 해도 되는 작업)
todos.sort(reverse=True)
must_start_time = todos[0][0] - todos[0][1] # 작업을 시작해도 되는 가장 느린 시간

for i in range(1, n):
    # 현재 탐색하고 있는 일 todos[i] 가 끝나야 하는 시간이 현재 작업이 시작되는 시간보다 앞서면
    if must_start_time > todos[i][0]:
        must_start_time = todos[i][0] - todos[i][1] # i번째 일을 시작할 수 있는 가장 느린 시간 
    else :
        must_start_time -= todos[i][1] # i번쨰 작업 소요 시간을 빼줌


if must_start_time >= 0:
    print(must_start_time)
else:
    print(-1)

'''
1. 작업이 끝나는 시간이 가장 늦는 순서로 정렬
3 5
8 14
5 20
1 16


2. 이전 작업 시작 시간과 비교
5 20 
=> 20 - 5, 최소 15 시에 시작해야함 (현재 작업 시작 시간 15)
1 16 
=> 현재 작업 시간 15 < 작업이 끝나야 하는 시간 16시, 따라서 15 - 1, 14시에 시작해야함 (현재 작업 시작 시간 14)
8 14 
=> 현재 작업 시간 14 == 작업이 끝나야 하는 시간 14시, 따라서 14 - 8, 6시에 시작해야함 (현재 작업 시작 시간 6)
3 5 
=> 현재 작업 시간 6 > 작업이 끝나야 하는 시간 5시, 따라서 일을 시작할 수 있는 가장 느린 시간 가능, 5-3 (현재 작업 시작 시간 2)
최종 작업 시작 시간 2

2-1. 이전 작업 시작 시간 > i 번째 일을 끝내야 하는 시간 : 일을 시작할 수 있는 가장 느린 시간 (i번째 작업 최대 종료 시간 - i번째 작업 소요 시간)
2-2. 이전 작업 시작 시간 <= i 번째 일을 끝내야 하는 시간 : 이전 작업 시작 시간 - i번째 작업 소요 시간
'''




