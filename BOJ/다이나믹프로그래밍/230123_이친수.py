# 2193

import sys
input = sys.stdin.readline

# n이 1, 2인 경우는 각각 1개씩
cnt = [1, 1]
n = int(input())

if n <= 2:
    print(1)
else:
    for i in range(3, n+1):
        cnt.append(cnt[i-2 -1] + cnt[i-1 -1])
    print(cnt[n-1])

'''
이친수 : 0과 1로 이루어진 숫자로, 11을 부분 문자열로 가지지 않으며, 0으로 시작하지 않음

n이 1인 경우 (일의 자리)
=> 1

n이 2인 경우 (십의 자리)
=> 10

n이 3인 경우 (백의 자리)
=> 100, 101 

n이 4인 경우 (천의 자리)
=> 1000, 1001, 1010
=> 맨 처음 숫자는 1로 시작하는 것이 고정 + 1이 연속으로 올 수 없으니 n이 3이상일 때 항상 10으로 시작함
=> 10 뒤에는 10, 01, 00 만 올 수 있다.
=> (n - 2 == 2) 에 해당하는 10 과, (n - 1 == 3) 1뒤에 오는 00, 01이 오게 된다.

n이 5인 경우 (만의 자리)
=> 10 000, 10 001, 10 010, 10 100, 10 101
=> (n - 2 == 3) 100, 101 과, (n - 1 == 4)에 해당하는 000, 010, 001 이다.

즉, 주어진 n에 대해 n-2, n-1 의 이친수 갯수를 더해가면
n에 대한 이친수 갯수를 구할 수 있다!

이전에 나온 값을 저장하여 재사용하는 부분은 동적 계획법의 컨셉이다.
+ 문제마다 규칙을 찾아야 한다는 점이 고등학교 때 확통 문제 같기도 하다 ^-^...
'''